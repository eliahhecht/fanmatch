@model FanMatch.Controllers.PersonController.PersonEditorViewModel
<script src="@Url.Content("~/Scripts/jquery-ui-1.10.3.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/underscore-min.js")" type="text/javascript"></script>
<link type="text/css" rel="Stylesheet" href="@Url.Content("~/Content/themes/base/jquery.ui.all.css")" />
<script type="text/javascript">
$(function() {
    var fandoms = @Html.Raw(Json.Encode(Model.AllFandoms.Select(f => new { id = f.Id, value = f.Name })));

    var updateIdsVal = function(updater) {
        var currentVal = $("#FandomIds").val();
            var newVal = updater(currentVal);
            $("#FandomIds").val(newVal);
    }

    var itemSelected = function (e, ui) {
            updateIdsVal(function(old) {return old + "," + ui.item.id;});

            $("<li />").data("fandom-id", ui.item.id)
                .html(ui.item.value + "<a href='#' class='Delete'>[x]</a>")
                .appendTo($("#FandomList"));
            $(this).val("");
            return false;
    };

    $("#Fandoms").autocomplete({source: fandoms, select: itemSelected, autoFocus: true});

    $("#FandomList").on("click", ".Delete", function(e) {
        e.preventDefault();
        var li = $(this).closest("li");
        var fandomId = parseInt(li.data("fandom-id"), 10);
        
        updateIdsVal(function(old) {
            return _.reject(
                _.map(_.reject(old.split(","), 
                        function(s) {return s  == '';}), 
                function(s) {return parseInt(s, 10);})
            , function(i) {return i == fandomId;})});
        li.remove();
    });
});
</script>
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>Person</legend>
        <div class="editor-label">
            @Html.LabelFor(model => model.Person.Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Person.Name)
            @Html.ValidationMessageFor(model => model.Person.Name)
        </div>
       
       
          
         <label for="IsWriter" class="checkbox">  @Html.EditorFor(m => m.Person.IsWriter) Is Writer </label>
        <label for="IsReader" class="checkbox">  @Html.EditorFor(m => m.Person.IsReader) Is Reader </label>
        <label for="CanMatchMultiple" class="checkbox">  @Html.EditorFor(m => m.Person.CanMatchMultiple) Can Match Multiple </label>
       
        <div class="editor-label">
            @Html.LabelFor(model => model.Person.Fandoms)
        </div>
        <div class="editor-field">
            <input type="text" id="Fandoms" />
            <ul id="FandomList">
                @foreach (var fandom in Model.Person.Fandoms)
                {
                    <li data-fandom-id="@fandom.Id">@fandom.Name <a href="#" class="Delete">[x]</a></li>
                }
            </ul>
            <input type="hidden" name="fandomIds" id="FandomIds" value="@String.Join(",", Model.Person.Fandoms.Select(f => f.Id))" />
        </div>
        @Html.HiddenFor(model => model.Person.Id)
        <p>
            <input type="submit" class="btn btn-primary" value="Save" />
        </p>
    </fieldset>
}
